{
  "blogPosts": [
    {
      "id": "Bottender 1.4: Customizable Session Store, Messenger, LINE Features, Multi-language Documentation",
      "metadata": {
        "permalink": "/blog/2020/04/17/bottender-1_4",
        "source": "@site/blog/2020-04-17-bottender-1_4.md",
        "title": "Bottender 1.4: Customizable Session Store, Messenger, LINE Features, Multi-language Documentation",
        "description": "Today we are very excited to introduce Bottender 1.4, featuring:",
        "date": "2020-04-17T00:00:00.000Z",
        "formattedDate": "April 17, 2020",
        "tags": [],
        "readingTime": 4.815,
        "truncated": true,
        "authors": [
          {
            "name": "C. T. Lin",
            "title": "Co-Creator of Bottender",
            "url": "https://twitter.com/chentsulin",
            "imageURL": "https://avatars1.githubusercontent.com/u/3382565?s=460&v=4"
          }
        ],
        "nextItem": {
          "title": "Notice of LINE domain name change for certain endpoints",
          "permalink": "/blog/2020/04/08/line-domain-name-change"
        }
      },
      "content": "![](https://user-images.githubusercontent.com/3382565/79356403-7f2e6380-7f71-11ea-9180-c13b47642a42.png)\n\nToday we are very excited to introduce Bottender 1.4, featuring:\n\n- **[Routes Readability Improvement](/blog/2020/04/17/bottender-1_4#routes-readability-improvement)**\n- **[Customizable Session Store](/blog/2020/04/17/bottender-1_4#customizable-session-store)**\n- **[Messenger One-Time Notification (Beta)](/blog/2020/04/17/bottender-1_4#messenger-one-time-notification-beta)**\n- **[Messenger Message Reaction Event](/blog/2020/04/17/bottender-1_4#messenger-message-reaction-event)**\n- **[Built-In LINE Notify Support](/blog/2020/04/17/bottender-1_4#built-in-line-notify-support)**\n- **[LINE Icon and Display Name Switch](/blog/2020/04/17/bottender-1_4#line-icon-and-display-name-switch)**\n- **[LINE Emoji in Text Messages](/blog/2020/04/17/bottender-1_4#line-emoji-in-text-messages)**\n- **[Multi-language Documentation Website](/blog/2020/04/17/bottender-1_4#multi-language-documentation-website)**\n\nBesides, we also bring a bunch of TypeScript improvements into this release. If you're using TypeScript with Bottender in your project, you may want to upgrade and see the changes.\n\n<!--truncate-->\n\n## Routes Readability Improvement\n\nWe add `.any` to the original route APIs to hint that they trigger the provided action when receiving **any** events on specific platform:\n\n- `messenger` -> `messenger.any`\n- `line` -> `line.any`\n- `telegram` -> `telegram.any`\n- `whatsapp` -> `whatsapp.any`\n- `slack` -> `slack.any`\n- `viber` -> `viber.any`\n\nConsidering the following example, having `.any` can make the code easier to read:\n\n```js\nfunction App() {\n  return router([\n    messenger.postback(HandleMessengerPostback),\n    messenger.delivery(HandleMessengerDelivery),\n    messenger.read(HandleRead),\n    messenger.any(HandleMessengerEvent),\n    line.follow(HandleLINEFollow),\n    line.unfollow(HandleLINEUnfollow),\n    line.join(HandleLINEJoin),\n    line.leave(HandleLINELeave),\n    line.any(HandleLineEvent),\n  ]);\n}\n```\n\n## Customizable Session Store\n\nStarting from Bottender 1.4, Bottender supports using any custom session store that implemented the [SessionStore](https://github.com/Yoctol/bottender/blob/master/packages/bottender/src/session/SessionStore.ts) interface.\n\nTo use your custom session store, set `driver` to your custom key and put the instance of your session store to `stores` accordingly in your `bottender.config.js` file:\n\n```js\n// bottender.config.js\n\nmodule.exports = {\n  session: {\n    driver: 'mysession',\n    stores: {\n      mysession: new MySessionStore();\n    },\n  },\n};\n```\n\nSo, now you can store your sessions in any storage, for example, Firebase and Amazon DynamoDB.\n\n## Messenger One-Time Notification (Beta)\n\n[The Messenger Platform's One-Time Notification API (Beta)](https://developers.facebook.com/docs/messenger-platform/send-messages/one-time-notification) is a feature that allows a page to request a user permission for sending one follow-up message after the 24-hour messaging window has ended. The user will be offered to receive a future notification.\n\n![](https://user-images.githubusercontent.com/3382565/79429450-18a15800-7ffa-11ea-82a8-61af539ac738.png)\n\nTo send a one time notification template, call `context.sendOneTimeNotifReqTemplate()` with a title and payload:\n\n```js\nasync function MyAction(context) {\n  await context.sendOneTimeNotifReqTemplate({\n    title: '<TITLE_TEXT>',\n    payload: '<USER_DEFINED_PAYLOAD>',\n  });\n}\n```\n\nWhen the user consents to be notified on a specific update, you will get an `optin' event with the payload and one-time token. You will need to store the token somewhere to use it in the future.\n\n```js\nfunction App() {\n  return router([\n    messenger.optin(async HandleOption(context) {\n      const { optin } = context.event;\n      if (optin.type === 'one_time_notif_req') {\n         // optin.payload -> the payload you sent in  `context.sendOneTimeNotifReqTemplate` request\n         // optin.oneTimeNotifToken -> the one-time token you need to store somewhere\n      }\n    }),\n  ]);\n}\n```\n\nWhen the information becomes available, you can use this one-time token to send a follow up message to the user:\n\n```js\nconst { getClient } = require('bottender');\n\nconst messenger = getClient('messenger');\n\nmessenger.sendText(\n  { oneTimeNotifToken: 'ONE_TIME_TOKEN' },\n  'This is a one-time notification.'\n);\n```\n\n## Messenger Message Reaction Event\n\n[Message reaction](https://developers.facebook.com/docs/messenger-platform/reference/webhook-events/message-reactions/) is a type of event that triggered when a user press and hold any message, and then tap to make the selection from the following types of emojis:\n\n- smile\n- angry\n- sad\n- wow\n- love\n- like\n- dislike\n\n![](https://user-images.githubusercontent.com/3382565/79419985-85acf180-7fea-11ea-80d5-c99b4a665b70.jpg)\n\nTo handle message reaction events, you must subscribe to the `message_reactions` field for your page. And then you can do whatever you want when receiving `react` and `unreact` events:\n\n```js\nconst { router, messenger } = require('bottender/router');\n\nfunction App() {\n  return router([\n    messenger.reaction.react(async function HandleReactionReact(context) {\n      // Handle react here\n      context.event.reaction.reaction; // \"love\"\n    }),\n    messenger.reaction.unreact(async function HandleReactionUnreact(context) {\n      // Handle unreact here\n    }),\n  ]);\n}\n```\n\nIt is particularly useful when you want to know the feedback from your users.\n\n## Built-In LINE Notify Support\n\nPush API allows you to send messages directly to your users anytime. However, it might cost some money depends on the pricing plan in your country. [LINE Notify](https://notify-bot.line.me/) is a service that helps you build your notification app without the cost we mentioned earlier.\n\nBottender now supports LINE Notify using the `LineNotify` class. You can use it to exchange the token and send notifications to the user:\n\n```js\nconst { LineNotify } = require('bottender');\n\nconst lineNotify = new LineNotify({\n  clientId: '<LINE_NOTIFY_CLIENT_ID>',\n  clientSecret: '<LINE_NOTIFY_CLIENT_SECRET>',\n  redirectUri: 'https://example.com/your/notify/redirect/path',\n});\n\nconst token = await lineNotify.getToken('<AUTHORIZATION_CODE>');\nawait lineNotify.sendNotify(token, 'Hello bottender!');\n```\n\nTo learn more about LINE Notify refer to the [LINE Notify Documentation](/docs/en/channel-line-notify).\n\n## LINE Icon and Display Name Switch\n\nRecently, LINE announced that [icon and display name for LINE official account can be changed](https://developers.line.biz/zh-hant/news/2020/03/17/icon-nickname-switch/).\n\n![](https://user-images.githubusercontent.com/3382565/79414458-44faab80-7fdd-11ea-9b72-d039df1addf3.png)\n\nTo change the icon and display name of your LINE Official Account, provide the `sender` option:\n\n```js\nawait context.sendText('Hello, I am Cony!!', {\n  sender: {\n    name: 'Cony',\n    iconUrl: 'https://line.me/conyprof',\n  },\n});\n```\n\n## LINE Emoji in Text Messages\n\nYou might have already learned that you can include LINE emojis in your text message:\n\n```js\nawait context.sendText(\n  `Look at this: ${String.fromCodePoint(0x100084)} It's a LINE emoji!`\n);\n```\n\nIn [Messaging API Update for April 2020](https://developers.line.biz/zh-hant/news/2020/04/14/messaging-api-update-april-2020/), LINE announced LINE original emoji in the previous example is deprecated.\n\nNow you can provide the `emoji` option includes an index, product ID, and emoji ID of the emojis in your text message:\n\n```js\nawait context.sendText(\"Look at this: $ It's a LINE emoji!\", {\n  emojis: [\n    {\n      index: 14,\n      productId: '5ac1bfd5040ab15980c9b435',\n      emojiId: '001',\n    },\n  ],\n});\n```\n\nFor more emojis, see [Sendable LINE Emoji List](https://d.line-scdn.net/r/devcenter/sendable_line_emoji_list.pdf).\n\n## Multi-language Documentation Website\n\nIn this version, we start moving our official documentation website from English-only to multi-language. Thanks to [Docusaurus](https://docusaurus.io/) and [Crowdin](https://crowdin.com/) Open source Plan, the multi-language setup couldn't be easier.\n\nThe first language we try to translate is Traditional Chinese, and almost 70% of the latest documentation has been translated.\n\nYou can find the language switch dropdown on the website header:\n\n![](https://user-images.githubusercontent.com/3382565/79418575-927c1600-7fe7-11ea-9c41-4d69c9a5a4a9.png)\n\nWe'll keep spending a lot of effort on improving our English documents because it's still a lot of important topics we need to cover.\n\nIf you're interested in helping translate those documents (especially other than Traditional Chinese), please contact us on Twitter [@bottenderjs](https://twitter.com/bottenderjs) or send email to [bottender@yoctol.com](bottender@yoctol.com)."
    },
    {
      "id": "Notice of LINE domain name change for certain endpoints",
      "metadata": {
        "permalink": "/blog/2020/04/08/line-domain-name-change",
        "source": "@site/blog/2020-04-08-line-domain-name-change.md",
        "title": "Notice of LINE domain name change for certain endpoints",
        "description": "According to the Notice of domain name change for certain endpoints post on LINE Developer News, the domain name of the following LINE Messaging API endpoints has been changed from api.line.me to api-data.line.me during the transition period:",
        "date": "2020-04-08T00:00:00.000Z",
        "formattedDate": "April 8, 2020",
        "tags": [],
        "readingTime": 0.59,
        "truncated": true,
        "authors": [
          {
            "name": "C. T. Lin",
            "title": "Co-Creator of Bottender",
            "url": "https://twitter.com/chentsulin",
            "imageURL": "https://avatars1.githubusercontent.com/u/3382565?s=460&v=4"
          }
        ],
        "prevItem": {
          "title": "Bottender 1.4: Customizable Session Store, Messenger, LINE Features, Multi-language Documentation",
          "permalink": "/blog/2020/04/17/bottender-1_4"
        },
        "nextItem": {
          "title": "Bottender 1.3: WhatsApp Support, TypeScript Improvement",
          "permalink": "/blog/2020/03/06/bottender-1_3"
        }
      },
      "content": "According to the [Notice of domain name change for certain endpoints](https://developers.line.biz/en/news/2019/11/08/domain-name-change/) post on LINE Developer News, the domain name of the following LINE Messaging API endpoints has been changed from `api.line.me` to `api-data.line.me` during the transition period:\n\n<!--truncate-->\n\n- [Get content](https://developers.line.biz/en/reference/messaging-api/#get-content):\n\n```js\ncontext.getMessageContent();\n\n// or in Bottender v0.15\ncontext.retrieveMessageContent();\n```\n\n- [Upload rich menu image](https://developers.line.biz/en/reference/messaging-api/#upload-rich-menu-image):\n\n```js\nconst { getClient } = require('bottender');\n\nconst line = getClient('line');\n\nawait line.uploadRichMenuImage(richMenuId, imageBuffer);\n```\n\n- [Download rich menu image](https://developers.line.biz/en/reference/messaging-api/#download-rich-menu-image):\n\n```js\nconst { getClient } = require('bottender');\n\nconst line = getClient('line');\n\nconst imageBuffer = await line.downloadRichMenuImage(richMenuId);\n```\n\nIf you are using the above endpoints and methods, please make sure to upgrade Bottender to `v1.3.3+` (or `v0.15.18+` if using `v0.x`) before **April 30, 2020**."
    },
    {
      "id": "Bottender 1.3: WhatsApp Support, TypeScript Improvement",
      "metadata": {
        "permalink": "/blog/2020/03/06/bottender-1_3",
        "source": "@site/blog/2020-03-06-bottender-1_3.md",
        "title": "Bottender 1.3: WhatsApp Support, TypeScript Improvement",
        "description": "We are excited to introduce Bottender 1.3 today, featuring:",
        "date": "2020-03-06T00:00:00.000Z",
        "formattedDate": "March 6, 2020",
        "tags": [],
        "readingTime": 3,
        "truncated": true,
        "authors": [
          {
            "name": "C. T. Lin",
            "title": "Co-Creator of Bottender",
            "url": "https://twitter.com/chentsulin",
            "imageURL": "https://avatars1.githubusercontent.com/u/3382565?s=460&v=4"
          }
        ],
        "prevItem": {
          "title": "Notice of LINE domain name change for certain endpoints",
          "permalink": "/blog/2020/04/08/line-domain-name-change"
        },
        "nextItem": {
          "title": "Bottender 1.2: Serverless, NLU Integration, and More",
          "permalink": "/blog/2020/01/22/bottender-1_2"
        }
      },
      "content": "![](https://user-images.githubusercontent.com/3382565/76055870-d410ae80-5faf-11ea-89bf-b3f09a773285.png)\n\nWe are excited to introduce Bottender 1.3 today, featuring:\n\n- **[WhatsApp Support](/blog/2020/03/06/bottender-1_3#whatsapp-support)**\n- **[Slack Request Signing](/blog/2020/03/06/bottender-1_3#slack-request-signing)**\n- **[Slack Slash Command](/blog/2020/03/06/bottender-1_3#slack-slash-command)**\n- **[TypeScript Support in Create Bottender App](/blog/2020/03/06/bottender-1_3#typescript-support-in-create-bottender-app)**\n- **[More Exported TypeScript Types](/blog/2020/03/06/bottender-1_3#more-exported-typescript-types)**\n\n<!--truncate-->\n\n## WhatsApp Support\n\nSince we released Bottender in 2017, WhatsApp support has been a highly requested feature because of its popularity.\n\nAs a result, we managed to implement the support with [Twilio API for WhatsApp](https://www.twilio.com/whatsapp) in this release. Twilio API for WhatsApp is one of the most popular ways to send and receive messages programmatically in WhatsApp.\n\nIn Bottender v1.3, you may enable `whatsapp` webhook in your `bottender.config.js` file to start listening to the WhatsApp requests:\n\n```js\nmodule.exports = {\n  channels: {\n    whatsapp: {\n      enabled: true,\n      path: '/webhooks/whatsapp',\n      accountSid: process.env.WHATSAPP_ACCOUNT_SID,\n      authToken: process.env.WHATSAPP_AUTH_TOKEN,\n      phoneNumber: process.env.WHATSAPP_PHONE_NUMBER,\n    },\n  },\n};\n```\n\nMoreover, Bottender provides the WhatsApp routes for you to define WhatsApp specific routing:\n\n```js\nconst { router, whatsapp } = require('bottender/router');\n\nfunction App() {\n  return router([\n    whatsapp.message(HandleMessage),\n    whatsapp.media(HandleMedia),\n    whatsapp.received(HandleReceived),\n    whatsapp.sent(HandleSent),\n    whatsapp.delivered(HandleDelivered),\n    whatsapp.read(HandleRead),\n    whatsapp(HandleWhatsapp),\n  ]);\n}\n```\n\n## Slack Request Signing\n\nWe now support request signing for verification instead of tokens. According to [Slack's announcement](https://api.slack.com/docs/verifying-requests-from-slack#verification_token_deprecation), verification by the token is deprecated now. We highly recommend our users to upgrade if you're using this feature.\n\nTo upgrade, get your Slack app's signing secret from Slack console and paste it to your `.env` and `bottender.config.js` accordingly. See our [doc](https://bottender.js.org/docs/channel-slack-setup) for detailed instruction.\n\n```yaml\n# .env\n\nSLACK_ACCESS_TOKEN=__YOUR_ACCESS_TOKEN_HERE__\nSLACK_SIGNING_SECRET=__YOUR_SECRET_HERE__\n# SLACK_VERIFICATION_TOKEN= # deprecated, use SLACK_SIGNING_SECRET\n```\n\n```js\n// bottender.config.js\n\nmodule.exports = {\n  channels: {\n    slack: {\n      enabled: true,\n      path: '/webhooks/slack',\n      accessToken: process.env.SLACK_ACCESS_TOKEN,\n      signingSecret: process.env.SLACK_SIGNING_SECRET,\n      // verificationToken: process.env.SLACK_VERIFICATION_TOKEN, // deprecated, use signingSecret\n    },\n  },\n};\n```\n\n## Slack Slash Command\n\nPlus, we add support for Slack Slash Command. It can handle commands like `/todo ask @crushermd to bake a birthday cake for @worf in #d-social` and access arguments in Bottender context:\n\nTo determine whether the event is a slash command event, you may check the boolean value - `context.event.isCommand`:\n\n```js\nasync function App(context) {\n  if (context.event.isCommand) {\n    // handling the slash command event\n  }\n}\n```\n\nYou can get the command from `context.event.command` and its arguments from `context.event.text` and use them in the reply:\n\n```js\nasync function App(context) {\n  if (context.event.isCommand) {\n    await context.sendText(\n      `I received slash command '${context.event.command}' with arguments: '${context.event.text}'`\n    );\n  }\n}\n```\n\nYou also need to add commands in Slack's console to enable this feature. See our [doc](https://bottender.js.org/docs/channel-slack-slash-comman) for detailed setup in Slack's console.\n\n### TypeScript Support in Create Bottender App\n\nIn Bottender v1.3, Create Bottender App makes configuring TypeScript very simple. In fact, almost everything is configured for you out of the box. To create a TypeScript application, the only thing you need to do is to add `--typescript` to your command:\n\n```sh\nnpx create-bottender-app my-app --typescript\n```\n\nBesides, you could still use the `dev` command to develop your TypeScript application:\n\n```sh\nbottender dev\n```\n\nIf `tsconfig.json` present, it will watch and compile your TypeScript files for you.\n\n### More Exported TypeScript Types\n\nIn previous releases, most of the types we defined didn't get exported to the Bottender users. It makes our TypeScript users sometimes have to redefine the same types in their codebase.\n\nIn Bottender v1.3, you may import defined types to type hint your TypeScript application:\n\n```ts\nimport {\n  MessengerTypes,\n  WhatsappTypes,\n  LineTypes,\n  TelegramTypes,\n  SlackTypes,\n  ViberTypes,\n} from 'bottender';\n```\n\nHowever, there are still some types that need to be exported or polished. We will keep an eye on it and try our best to investigate more TypeScript use cases.\n\nIf you have some problems with using TypeScript in Bottender, feel free to [open an issue](https://github.com/Yoctol/bottender/issues/new/choose) in Bottender repo. Let's improve it together!"
    },
    {
      "id": "Bottender 1.2: Serverless, NLU Integration, and More",
      "metadata": {
        "permalink": "/blog/2020/01/22/bottender-1_2",
        "source": "@site/blog/2020-01-22-bottender-1_2.md",
        "title": "Bottender 1.2: Serverless, NLU Integration, and More",
        "description": "We are excited to introduce Bottender 1.2 today, featuring:",
        "date": "2020-01-22T00:00:00.000Z",
        "formattedDate": "January 22, 2020",
        "tags": [],
        "readingTime": 3.58,
        "truncated": true,
        "authors": [
          {
            "name": "C. T. Lin",
            "title": "Co-Creator of Bottender",
            "url": "https://twitter.com/chentsulin",
            "imageURL": "https://avatars1.githubusercontent.com/u/3382565?s=460&v=4"
          }
        ],
        "prevItem": {
          "title": "Bottender 1.3: WhatsApp Support, TypeScript Improvement",
          "permalink": "/blog/2020/03/06/bottender-1_3"
        },
        "nextItem": {
          "title": "Bottender 1.1: Multi-Channel Routing, Better Slack APIs Support in Chat, View, Block Kit",
          "permalink": "/blog/2019/12/27/bottender-1_1"
        }
      },
      "content": "![](https://user-images.githubusercontent.com/3382565/72883961-41d68300-3d40-11ea-9e86-323d77871e41.png)\n\nWe are excited to introduce Bottender 1.2 today, featuring:\n\n- **[Serverless Support and Documentation](/blog/2020/01/22/bottender-1_2#serverless-supporting-and-documentation):** Zeit Now v2 and AWS Lambda\n- **[Built-In Support for Intent Labeling](/blog/2020/01/22/bottender-1_2#built-in-support-for-intent-labeling):** Bottender context now support labeling user intent and handled status.\n- **[Packages to Integrate with NLU Services](/blog/2020/01/22/bottender-1_2#packages-to-integrate-with-nlu-services):** Bots can now integrate with popular NLU services Dialogflow, LUIS, QnA Maker, and Rasa with less efforts.\n- **[Accessing Session Store](https://bottender.js.org/blog/2020/01/22/bottender-1_2#accessing-session-store):** Manipulating session data directly if you needed.\n- **[Accessing Messaging Clients](/blog/2020/01/22/bottender-1_2#accessing-messaging-clients):** Getting configured messaging clients out of the box to call API anytime.\n\nAll of these benefits are non-breaking and fully backward compatible. You can update it by running:\n\n```sh\nnpm install bottender@latest\n```\n\n<!--truncate-->\n\n## Serverless Supporting and Documentation\n\nSince Bottender aims to be server-agnostic from the very beginning, this makes it possible to integrate with most of Node.js server frameworks and even serverless frameworks via HTTP protocol.\n\nIn the last few months, we were trying to deploy Bottender bot as a function on serverless environments such as [Zeit Now](https://zeit.co/) or [AWS Lambda](https://aws.amazon.com/lambda/) and finally got succeeded.\n\nYou can check out [step-by-step deployment guide for Zeit Now](https://bottender.js.org/docs/advanced-guides-deployment#zeit-now-20) and [AWS Lambda example](https://github.com/Yoctol/bottender/tree/master/examples/with-aws-lambda) for further details.\n\nWe understand that the bundle size and performance is quite sensitive while deploying to the serverless environment, more optimization and documentation or examples for Google Cloud Functions and Azure Functions are still ongoing.\n\n## Built-In Support for Intent Labeling\n\nBottender v1.2 introduces a new API `context.setIntent()` for labeling intent to the conversation context:\n\n```js\ncontext.setIntent('greeting');\n\ncontext.intent; // 'greeting'\n```\n\nFurthermore, you can also set handled status by `context.setAsHandled()` or `context.setAsNotHandled()`:\n\n```js\ncontext.setAsHandled();\n\ncontext.isHandled; // true\n\ncontext.setAsNotHandled();\n\ncontext.isHandled; // false\n```\n\nThis feature might found not very useful at this moment, but it's the key to the chatbot analytics, and we will soon introduce [Chatbase](https://chatbase.com/) and [Dashbot](https://www.dashbot.io/) integrations on top of it in the future release.\n\n## Packages to Integrate with NLU Services\n\nIn v1.2, we announced four npm packages to integrate with the great natural language understanding (NLU) services:\n[Google Dialogflow](https://dialogflow.com/), [Microsoft LUIS](https://www.luis.ai/), [Microsoft QnA Maker](https://www.qnamaker.ai/) and [Rasa](https://rasa.com/).\n\n- `@bottender/dialogflow`\n- `@bottender/luis`\n- `@bottender/qna-maker`\n- `@bottender/rasa`\n\nTo understand how those packages work, let's use `Dialogflow` as an example.\n\nAfter installing the `@bottender/dialogflow` package, you can create an action using `dialogflow` function and put it in your bot:\n\n```js\nconst dialogflow = require('@bottender/dialogflow');\n\nasync function SayHello(context) {\n  await context.sendText('Hello!');\n}\n\nasync function Unknown(context) {\n  await context.sendText('Sorry, I don’t know what you say.');\n}\n\nconst Dialogflow = dialogflow({\n  projectId: process.env.GOOGLE_APPLICATION_PROJECT_ID,\n  actions: {\n    greeting: SayHello,\n  },\n});\n\nmodule.exports = async function App() {\n  return chain([\n    Dialogflow, //\n    Unknown,\n  ]);\n};\n```\n\nThe bot in the above example says `Hello!` when the intent received from Dialogflow is `greeting`. Otherwise, it replies with a fallback sentence.\n\nIn addition, it automatically calls `context.setIntent()` or `context.setAsNotHandled()` methods that we mentioned earlier to label the intent and handled status under the hood.\n\n## Accessing Session Store\n\nBottender now supports accessing underlying session store configured by `bottender.config.js`:\n\n```js\nconst { getSessionStore } = require('bottender');\n\nconst sessionStore = getSessionStore();\n```\n\nYou may want to get particular session data or clean up a specific session by manipulating the session store directly.\n\n## Accessing Messaging Clients\n\nBottender now supports accessing underlying [messaging clients](https://github.com/Yoctol/messaging-apis) configured by `bottender.config.js`:\n\n```js\nconst { getClient } = require('bottender');\n\nconst messenger = getClient('messenger');\nconst line = getClient('line');\n```\n\nFor example, to send a text message to the user by user id, you may call `sendText` method on Messenger client with some extra parameters:\n\n```js\nconst messenger = getClient('messenger');\n\nmessenger.sendText(USER_ID, 'Hello!', { tag: 'CONFIRMED_EVENT_UPDATE' });\n```\n\nAnd it could also be done in LINE by using `pushText` method:\n\n```js\nconst line = getClient('line');\n\nline.pushText(USER_ID, 'Hello!');\n```\n\n## What's Next?\n\nWe are always welcome any feedback and feature requests from the community; we believe that listening to the community makes perfect.\n\nOne of the most concerned topics in the period is TypeScript usage. Therefore, we will focus on polishing TypeScript types and better TypeScript support with Create Bottender App and Bottender core in the upcoming month.\n\nWhatsApp connector is another notable feature we're currently working on. There are a lot of users ever request this feature.\n\nDon't be shy! If you're using Bottender in your bot, send us a pull request to our [users](https://bottender.js.org/users) page to add your bot. Let us know how you use Bottender!"
    },
    {
      "id": "Bottender 1.1: Multi-Channel Routing, Better Slack APIs Support in Chat, View, Block Kit",
      "metadata": {
        "permalink": "/blog/2019/12/27/bottender-1_1",
        "source": "@site/blog/2019-12-27-bottender-1_1.md",
        "title": "Bottender 1.1: Multi-Channel Routing, Better Slack APIs Support in Chat, View, Block Kit",
        "description": "In Bottender v1.1, we made two remarkable improvements in:",
        "date": "2019-12-27T00:00:00.000Z",
        "formattedDate": "December 27, 2019",
        "tags": [],
        "readingTime": 1.945,
        "truncated": true,
        "authors": [
          {
            "name": "C. T. Lin",
            "title": "Co-Creator of Bottender",
            "url": "https://twitter.com/chentsulin",
            "imageURL": "https://avatars1.githubusercontent.com/u/3382565?s=460&v=4"
          }
        ],
        "prevItem": {
          "title": "Bottender 1.2: Serverless, NLU Integration, and More",
          "permalink": "/blog/2020/01/22/bottender-1_2"
        },
        "nextItem": {
          "title": "Bottender 1.0: Create Bottender App, Router, Action Runner and Bottender.js.org",
          "permalink": "/blog/2019/12/05/bottender-1"
        }
      },
      "content": "In Bottender v1.1, we made two remarkable improvements in:\n\n- **[Multi-Channel Routing](/blog/2019/12/27/bottender-1_1#multi-channel-routing)**\n- **[Better Slack APIs Support in Chat, View, Block Kit](/blog/2019/12/27/bottender-1_1#better-slack-apis-support-in-chat-view-block-kits)**\n\n<!--truncate-->\n\n## Multi-Channel Routing\n\nIn Bottender v1.0, we first introduced the idea of [`Routing`](/docs/the-basics-routing) to help bot developers organize the path of bot actions.\n\nWhen we come to Bottender v1.1, we are glad to announce `Multi-Channel Routing`, which enable bot developers to have a dedicated path control cross multiple chat channels.\n\n```js\nconst {\n  router,\n  messenger,\n  line,\n  slack,\n  telegram,\n  viber,\n} = require('bottender/router');\n\nasync function MessengerAction(context) {\n  /* ... */\n}\nasync function LineAction(context) {\n  /* ... */\n}\nasync function SlackAction(context) {\n  /* ... */\n}\nasync function TelegramAction(context) {\n  /* ... */\n}\nasync function ViberAction(context) {\n  /* ... */\n}\n\nfunction App() {\n  return router([\n    messenger(MessengerAction),\n    line(LineAction),\n    slack(SlackAction),\n    telegram(TelegramAction),\n    viber(ViberAction),\n  ]);\n}\n```\n\n<!--truncate-->\n\n### More Events for Routing\n\nBesides, Bottender v1.1 adds chat channel specific events for `Routing`, which allows you to write better modular code in your product codebase.\n\nFor example, you can use the same action to update your customer database while a bot user follows/unfollows your bot either on Messenger, LINE or Viber.\n\n```js\nconst { router, payload, line, telegram } = require('bottender/router');\n\nasync function Follow(context) {\n  console.log(`insert ${context.session.user.id} into database`);\n  await context.sendText('Welcome to my bot!');\n}\n\nasync function Unfollow(context) {\n  console.log(`delete ${context.session.user.id} from database`);\n}\n\nfunction App() {\n  return router([\n    payload('GET_STARTED', Follow),\n    line.follow(Follow),\n    line.unfollow(Unfollow),\n    line.join(Follow),\n    line.leave(Unfollow),\n    viber.subscribed(Follow),\n    viber.unsubscribed(Unfollow),\n  ]);\n}\n```\n\n> **Note:** Please refer to [v1.1.0 Change Log](https://github.com/Yoctol/bottender/releases/tag/v1.1.0) to see the whole list of support events for `Routing`.\n\n## Better Slack APIs Support in Chat, View, Block Kits\n\nSince we have observed the increasing needs of Slack Bots, Bottender 1.1 now supports Slack `Chat` and `View` APIs. Slack bot developers, can use [Slack Native APIs](https://api.slack.com/methods) on Bottender without adaptions. Check out our new doc, [Sending Slack Messages](/docs/channel-slack-sending-messages) for more info.\n\n```js\ncontext.chat.postMessage(/* ... */);\ncontext.chat.postEphemeral(/* ... */);\ncontext.chat.update(/* ... */);\ncontext.chat.delete(/* ... */);\ncontext.chat.meMessage(/* ... */);\ncontext.chat.getPermalink(/* ... */);\ncontext.chat.scheduleMessage(/* ... */);\ncontext.chat.deleteScheduledMessage(/* ... */);\ncontext.chat.scheduledMessages.list(/* ... */);\n```\n\nPlus, we also improved [`Block Kit` and `Modal`](https://api.slack.com/block-kit) support. Thanks to static type-checking, you can have a pleasant experience when building block kits UIs. For more info, please see our new doc, [Slack Block Kit](/docs/channel-slack-block-kit).\n\n```js\ncontext.views.open(/* ... */);\ncontext.views.publish(/* ... */);\ncontext.views.push(/* ... */);\ncontext.views.update(/* ... */);\n```"
    },
    {
      "id": "Bottender 1.0: Create Bottender App, Router, Action Runner and Bottender.js.org",
      "metadata": {
        "permalink": "/blog/2019/12/05/bottender-1",
        "source": "@site/blog/2019-12-05-bottender-1.md",
        "title": "Bottender 1.0: Create Bottender App, Router, Action Runner and Bottender.js.org",
        "description": "We're very proud to announce the production-ready Bottender 1.0 today, featuring:",
        "date": "2019-12-05T00:00:00.000Z",
        "formattedDate": "December 5, 2019",
        "tags": [],
        "readingTime": 4.55,
        "truncated": true,
        "authors": [
          {
            "name": "C. T. Lin",
            "title": "Co-Creator of Bottender",
            "url": "https://twitter.com/chentsulin",
            "imageURL": "https://avatars1.githubusercontent.com/u/3382565?s=460&v=4"
          }
        ],
        "prevItem": {
          "title": "Bottender 1.1: Multi-Channel Routing, Better Slack APIs Support in Chat, View, Block Kit",
          "permalink": "/blog/2019/12/27/bottender-1_1"
        },
        "nextItem": {
          "title": "Bottender 0.15",
          "permalink": "/blog/2018/08/03/bottender-0_15"
        }
      },
      "content": "We're very proud to announce the production-ready **Bottender 1.0** today, featuring:\n\n- **[Create Bottender App](/blog/2019/12/05/bottender-1#create-bottender-app)**\n- **[Conversation Made Easy and Simple](/blog/2019/12/05/bottender-1#conversation-made-easy-and-simple)**\n  - **[Conversation Router](/blog/2019/12/05/bottender-1#conversation-router)**\n  - **[Action Runner](/blog/2019/12/05/bottender-1#action-runner)**\n- **[Integrating with Natural Language Understanding (NLU)](/blog/2019/12/05/bottender-1#integrating-with-natural-language-understanding-nlu)**\n- **[Fundamentally Rewritten in TypeScript](/blog/2019/12/05/bottender-1#fundamentally-rewritten-in-typescript)**\n- **[Bottender.js.org](/blog/2019/12/05/bottender-1#bottenderjsorg)**\n  - **[Versioned Documents and Search Box](/blog/2019/12/05/bottender-1#versioned-documents-and-search-box)**\n  - **[Preview Website on the PR](/blog/2019/12/05/bottender-1#preview-website-on-the-pr)**\n- **[What's Next](/blog/2019/12/05/bottender-1#whats-next)**\n  - **[Slot Filling](/blog/2019/12/05/bottender-1#slot-filling)**\n  - **[Serverless Support](/blog/2019/12/05/bottender-1#serverless-support)**\n\nCheckout v1 [changelog](https://github.com/Yoctol/bottender/releases/tag/v1.0.0) and [migration guide](/docs/migrating-v1) for more details.\n\n<!--truncate-->\n\n## Create Bottender App\n\n`create-bottender-app` is the best way to start building a new application in Bottender. It saves significant your time from installing packages and writing boilerplates.\n\nYou can start a multi-channel bot with only one command:\n\n```sh\n$ npx create-bottender-app my-app\n```\n\n![](https://user-images.githubusercontent.com/3382565/67745483-5667ef80-fa5f-11e9-8bae-39489b8544e7.png)\n\n## Conversation Made Easy and Simple\n\nWhile Bottender v0 focused on **Making Bots**, Bottender v1 retargeted on **Conversational User Interface**. You may notice that Bottender's new tagline, \"a framework for building conversational user interfaces.\"\n\nWhen it comes to commercial bot projects, we found that complicated messaging applications are not avoidable. To make the code easy to read and maintain, we introduced a new primitive, `Action`. `Actions` are the smallest building blocks of Bottender apps. Meanwhile, with `Actions`, Bottender users can benefit from the functional declarative world.\n\n```js\nasync function SayHi(context) {\n  await context.sendText('Hi!');\n}\n```\n\n### Conversation Router\n\nWith Bottender v1, you can use the new `Router` to organize your conversations. It's declarative and easy to read. Also, it makes debug very straightforward.\n\n```js\nconst { router, text } = require('bottender/router');\n\nasync function SayHi(context) {\n  await context.sendText('Hi!');\n}\n\nasync function Unknown(context) {\n  await context.sendText('Sorry, I don’t know what you say.');\n}\n\nmodule.export = function App(context) {\n  return router([\n    text('hi', SayHi), //\n    text('*', Unknown),\n  ]);\n};\n```\n\n### Action Runner\n\nBottender v1 introduces a new built-in `Action Runner` in the core, which makes Bottender as the command center of actions. `Action Runner` is a flexible and clear working pattern. It helps developers focus on implementing actions corresponding to different contexts. On the other hand, it also offers developers enormous possibilities for customization features.\n\n```js\nconst { withProps } = require('bottender');\n\nconst { router, text } = require('bottender/router');\n\nasync function SayHi(context, { name }) {\n  await context.sendText(`Hi! ${name}.`);\n}\n\nasync function SayHiToJohn(context) {\n  return withProps(SayHi, { name: 'John' });\n}\n\nasync function App(context) {\n  return router([\n    text('hi', SayHiToJohn), //\n    text('*', Unknown),\n  ]);\n}\n```\n\nPlus, `Action Runner` allows Bottender to have better control of conversation flow. For example, you may use debug environment variable `DEBUG=bottender:action` to debug how your app handling events:\n\n![](https://user-images.githubusercontent.com/3382565/70204869-0dd9db00-175d-11ea-814f-140b3807f39d.gif)\n\n## Integrating with Natural Language Understanding (NLU)\n\nNatural Language Understanding (NLU) is a critical factor of conversational business. Thanks to the growing machine learning and deep learning techniques, data scientists have made significant progress in the area of understanding human language in the past few years.\n\nTherefore, we rethink the best practices about how to use NLU techniques with Bottender. You can find Bottender official guides and examples for the modern NLU solutions:\n\n- [Dialogflow](/docs/advanced-guides-nlu#building-with-dialogflow)\n- [QnA Maker](/docs/advanced-guides-nlu#building-with-qna-maker)\n- [LUIS](/docs/advanced-guides-nlu#building-with-luis)\n- [Rasa](/docs/advanced-guides-nlu#building-with-rasa-nlu)\n\n## Fundamentally Rewritten in TypeScript\n\nStatic typing in JavaScript is one of the most impactful trending in the last few years. We adapt it to improve code reliability dramatically.\n\nAlthough we had embraced Flow Tye two years ago, we found TypeScript grows much faster and mature, owns better developer communities. Bottender v1 has fundamentally rewritten in TypeScript.\n\nSince Bottender is created for developers by developers, developer experience is a critical factor we always pursuit. TypeScript offers a better developer experience, e.g., dynamic tips, as you coding with VSCode.\n\n![](https://user-images.githubusercontent.com/3382565/70221821-f9f59f80-1783-11ea-9da5-af802d384c8c.png)\n\n## Bottender.js.org\n\nWe are very happy to introduce the new Bottender document site, bottender.js.org, built by Bottender core contributor [Evan Ye](https://github.com/jigsawye).\n\n![](https://user-images.githubusercontent.com/3382565/70168751-6c269f80-1704-11ea-831e-cb6a49065d96.png)\n\nWe have fully understood the importance of official documents and examples. Several team members are dedicated to the endless wish list of docs and examples. You can always expect new docs release every week. Last but not least, [API doc](/docs/api-context) is also available.\n\n[Tweet us](https://twitter.com/bottenderjs) if you want to read any specific topics! We are trying to give you an answer (even due day) as soon as possible.\n\n### Versioned Documents and Search Box\n\nThanks to the super powerful doc site package, [Docusaurus](https://docusaurus.io/) and [Docsearch](https://community.algolia.com/docsearch/), all documents on bottender.js.org are versioned and searchable by heading:\n\n![](https://user-images.githubusercontent.com/3382565/70169022-f1aa4f80-1704-11ea-8726-7a7ecc2fa1f1.png)\n\n### Preview Website on the PR\n\nEvery time a change happens inside a PR, Netlify automatically deploys it and make the preview of it ready.\n\n![](https://user-images.githubusercontent.com/3382565/70206187-a2463c80-1761-11ea-82fb-1ed6334368dc.png)\n\n## What's Next\n\nSince we have allocated enough resources to make Bottender active, you can keep an eye on our ambitious roadmap in [this issue](https://github.com/Yoctol/bottender/issues/435). Future item priorities are always dynamic, [tweet us](https://twitter.com/bottenderjs) if you want to upvote any of it.\n\nIn the following section, you can find out two major coming features.\n\n### Slot Filling\n\nThe multi-turn conversation is a daily chat pattern. It is used to get every detail for a particular scenario, e.g., booking a hotel, searching for the right gift. The most common way to achieve the multi-turn conversation is `Slot Filling`.\n\nWe already experimented with it in the past few months and made significant progress. You can expect a deep integration between `Slot Filling` of Dialogflow and Bottender in the near future.\n\n### Serverless Support\n\nChatbot is one of the best applications for serverless computing. Simplified HTTP adapter APIs of Bottender v1.0 makes it possible. In the near future, we are planning to support the following serverless computing:\n\n- AWS lambda\n- Google cloud functions\n- Azure functions\n- Zeit Now 2.0"
    },
    {
      "id": "Bottender 0.15",
      "metadata": {
        "permalink": "/blog/2018/08/03/bottender-0_15",
        "source": "@site/blog/2018-08-03-bottender-0_15.md",
        "title": "Bottender 0.15",
        "description": "After half an year of our open source journey, we are thrilled to finally introduce our latest work - Bottender v0.15. With the release this time, not only did we make tremendous progress from our experiences previously, we also benefited quite a lot by the feedback from the whole community, which we are highly appreciative of. Thanks to your support and feedback for us to get here today.",
        "date": "2018-08-03T00:00:00.000Z",
        "formattedDate": "August 3, 2018",
        "tags": [],
        "readingTime": 4.35,
        "truncated": true,
        "authors": [
          {
            "name": "C. T. Lin",
            "title": "Co-Creator of Bottender",
            "url": "https://twitter.com/chentsulin",
            "imageURL": "https://avatars1.githubusercontent.com/u/3382565?s=460&v=4"
          }
        ],
        "prevItem": {
          "title": "Bottender 1.0: Create Bottender App, Router, Action Runner and Bottender.js.org",
          "permalink": "/blog/2019/12/05/bottender-1"
        },
        "nextItem": {
          "title": "Bottender",
          "permalink": "/blog/2017/10/31/bottender"
        }
      },
      "content": "After half an year of our open source journey, we are thrilled to finally introduce our latest work - Bottender v0.15. With the release this time, not only did we make tremendous progress from our experiences previously, we also benefited quite a lot by the feedback from the whole community, which we are highly appreciative of. Thanks to your support and feedback for us to get here today.\n\nYou can now install the latest package by simply entering the command to your terminal:\n\n```sh\n$ npm i bottender@latest\n```\n\n```\n$ yarn add bottender@latest\n```\n\nAs we cannot stress enough the importance of a smooth process when it comes to developing, we try to avoid any sorts of breaking changes when updating to a new version. With that being said, developers should find it easy when making updates.\n\nYou can find the full change log [on GitHub Realease Page](https://github.com/Yoctol/bottender/releases/tag/v0.15.0).\n\n<!--truncate-->\n\n## Improving Developer Experience\n\nDeveloper experience has alwasys been our top priority. With the latest version v0.15, we launch two new features that will better the developing process significantly. They will not only speed up your developing process, they also make debugging much simpler than you can ever imagine.\n\n### ConsoleBot\n\nWith the help of `ConsoleBot`, it means less deployment, zero platform configuring, and skipping permission review in early development stages. You can now review the outcome on your terminal console. Under certain circumstances, you'll be able to develop without Internet access required, which facilitates a more convenient developing process.\n\n![console bot](/img/blog/2018-08-03/console-bot.png)\n\n### Debug\n\nWe are currently using [debug](https://github.com/visionmedia/debug) package to gather and organize all the debug information. You can reach different part of the debug log by adjusting `DEBUG` environment variable; following is a list of supported arguments:\n\n```sh\nDEBUG=bottender:*\nDEBUG=bottender:request\nDEBUG=bottender:session:read\nDEBUG=bottender:session:write\n```\n\nMonitoring the incoming requests and session read/write makes it easy to trace unexpected errors and it, at the same time, gives you a fuller understanding of how the whole program works.\n\n![console debug](/img/blog/2018-08-03/console-debug.jpg)\n\n## Boosting Performance with Batch\n\nIn this version, we built various batch requests strategy for Messenger and Line respectively, which potentially results in notable drops with API calls.\n\n### Messenger Batch\n\nFor Facebook Messenger, with [Batch requests in Graph API](https://developers.facebook.com/docs/graph-api/making-multiple-requests/), it is estimated that the HTTP requests will reduce to 1/50, and it automatically triggers retry when over-reaching request limits, which ensures availability under heavy network traffic.\n\n```js\nconst { isError613 } = require('messenger-batch');\n\nnew MessengerBot({\n  // ...\n  batchConfig: {\n    delay: 1000,\n    shouldRetry: isError613, // (#613) Calls to this api have exceeded the rate limit.\n    retryTimes: 2,\n  },\n});\n```\n\n### LINE Batch\n\nAs for LINE, we combine 5 messages in one batch request. By doing so, we can maximize the functionality of reply token while using Reply API:\n\n```js\nnew LineBot({\n  // ...\n  shouldBatch: true, // Default: false\n});\n```\n\n## Comprehensive Platform Support\n\nIn the previous version `v0.14.x`, we support a new platform `Viber`, and we are still perfecting functionaities on all platforms. On top of that, the new launch `v0.15` supports some relatively new platform features, such as:\n\n- [Messenger Platform 2.4](https://blog.messengerdevelopers.com/announcing-messenger-platform-v2-4-8a8ecd5f0f04)\n- [LINE Flex Message](https://developers.line.me/en/docs/messaging-api/using-flex-messages/)\n\n![](https://i.imgur.com/VtWnPud.png)\n\n## Customize Connector\n\nOne of the Bottender's design intention is to provide a flexible and multi-functional connector, making hooking up with any platform possible.\n\nApart from the currently built in console, Messenger, LINE, Slack, Telegram, Viber connectors, you can literally connect it to anything you please! You can find more detailed infomation on customized connector [in our document](https://bottender.js.org/docs/Guides-CustomConnector).\n\nIf you develop your own customized connector, feel free to publish it on npm, tag `bottender-connector` and share with everyone!\n\n## More Engaged in the Community\n\nWe continue receiving a lot of feedback from Twitter and GitHub, which is not going unnoticed. For more developer feedback, we set up a Discord Bottender developer channel, aiming at providing a platform where more voices could be heard. [Join Discord Bottender channel now](https://discordapp.com/invite/unmFzmR), chat with us and receive all first-hand information!\n\nBesides that, in order to better help developers solve Bottender related issue, we created the [bottender tag](https://stackoverflow.com/questions/tagged/bottender) on Stackoverflow; feel free to throw in any questions you might have!\n\n## Forging Ahead\n\nOur top goal is to provide easy acceccibility and to enhance performance. To acheive that, we will be focusing on the following:\n\n### More Friendly Developing Environment\n\nWe will keep on learning from different developing friendly projects, such as React so as to identify some common issues and provide corresponding solutions. We also strive for providing effective debugging tools.\n\n### Supporting More Platforms\n\nAside from working on implementing new functions to the existing platforms, we are also made aware that the community has high hopes on development regarding WeChat, Discord, Web and other platforms, which we would definitely put more effort into.\n\nWith our accumulative experiences from connector developing , we are confident the interface of connector and related files would be available in a more user-friendly way.\n\n### Serverless\n\nExperiments are currently held on some major cloud providers with Serverless service, such as AWS Lambda, Google Cloud Functions, and Azure Functions ect. This would reduce a decent amount of maintaining costs when running less frequently visited chatbot service and more importantly, no sacrifices are to be made when it comes to user experience."
    },
    {
      "id": "Bottender",
      "metadata": {
        "permalink": "/blog/2017/10/31/bottender",
        "source": "@site/blog/2017-10-31-bottender.md",
        "title": "Bottender",
        "description": "We're very proud to open-source Bottender, a JavaScript framework for cross-platform bots, built on top of Messaging-APIs and lots of great tools from the JavaScript community!",
        "date": "2017-10-31T00:00:00.000Z",
        "formattedDate": "October 31, 2017",
        "tags": [],
        "readingTime": 2.875,
        "truncated": true,
        "authors": [
          {
            "name": "C. T. Lin",
            "title": "Co-Creator of Bottender",
            "url": "https://twitter.com/chentsulin",
            "imageURL": "https://avatars1.githubusercontent.com/u/3382565?s=460&v=4"
          }
        ],
        "prevItem": {
          "title": "Bottender 0.15",
          "permalink": "/blog/2018/08/03/bottender-0_15"
        }
      },
      "content": "We're very proud to open-source [Bottender](https://github.com/yoctol/bottender), a JavaScript framework for cross-platform bots, built on top of [Messaging-APIs](https://github.com/Yoctol/messaging-apis) and lots of great tools from the JavaScript community!\n\n![bottender logo](/img/blog/2017-10-31/logo-600x600.png)\n\nTo begin with, install `bottender` globally from the npm registry:\n\n```sh\nnpm install -g bottender\n```\n\nAnd enter interactive bot creation process with:\n\n```sh\nbottender init\n```\n\nAfter answering a few questions, a new bot will be created for you.\n\n![bottender init screenshot](/img/blog/2017-10-31/init-screenshot.png)\n\n<br />\n\n<!--truncate-->\n\n## Motivation\n\nWe are eager to envision a future of modern and friendly bot development, because we believe bots are the next big thing in terms of impact, scale and complexity.\n\nBot development should benefit from the latest improvements in JavaScript. Thanks to Babel, Node.js and the V8 engine, modern developers have escaped from call-back hell, but still have full access to the power of asynchronous error handling and state maintenance.\n\nAlso, bot development should be friendly. That is, developing bots on multiple messaging platforms should imply a consistent development experience without losing any of the characteristics or features of each platform.\n\nHere comes Bottender, our proposal of modern and friendly bot development.\n\n<br />\n\n## Only JavaScript. Handler is a function\n\nThe advantages of this approach over similar models is that you can do whatever you want in your function. And because of that, your entire system remains highly composable and testable.\n\n```js\nbot.onEvent(context => {\n  if (context.event.isText) {\n    console.log('Cool. You sent a text to me.');\n  }\n});\n```\n\nFurthermore, this handler function are fully testable without pain. Your test suite can simply import and test it.\n\n<br />\n\n## Control Asynchronous Flow using Async Functions\n\nWhen it comes to database queries or asynchronous API calls, modern async/await syntax give you great advantage to control your logic. Bottender's first class async/await support let you simply pass in any `async` handler. Farewell to callback hells.\n\n```js\nbot.onEvent(async context => {\n  if (context.event.text === 'you shoull call api') {\n    const result = await callSomeAsyncAPI(context.event.text);\n    await context.sendText(result);\n  }\n});\n```\n\n<br />\n\n## Keep Conversation State at Session Store\n\nConversation state can be initially defined with `bot.setInitialState()`, and can be modified during conversation using `context.setState()`. The state control is handled by underlying session store.\n\n```js\nbot.setInitialState({\n  todos: [],\n});\n\nbot.onEvent(context => {\n  if (context.event.isText) {\n    context.setState({\n      todos: context.state.todos.concat(context.event.text),\n    });\n  }\n});\n```\n\nYou can use `memory` session store in development, and replace it with persistence session stores on production.\n\n```js\nconst { FileSessionStore } = require('bottender');\n\nconst bot = new MessengerBot({\n  sessionStore: new FileSessionStore(),\n});\n```\n\nWe provide not only `file` session store but also `redis` and `mongo` session stores. You can even submit your session store by following the interface implementation.\n\n<br />\n\n## Simple deployment\n\nTo put your bot logic online, you need a HTTP server. Bottender provides simple `createServer()` function that do the trick for you, the server created can be extended as well.\n\n```js\nconst createServer = require('bottender/express');\n\nconst server = createServer(bot);\n\nserver.listen(3000, () => {\n  console.log('bot server is running on 3000 port');\n});\n```\n\nBottender supports four Node.js server frameworks, simply require corresponding `createServer()` from submodules.\n\n```js\n// import from express\nconst createServer = require('bottender/express');\n\n// import from koa\nconst createServer = require('bottender/koa');\n\n// import from micro\nconst createServer = require('bottender/micro');\n\n// import from restify\nconst createServer = require('bottender/restify');\n```\n\nSince Bottender works as a Node.js HTTP server, you can easily deploy your bots to PaaS like [Heroku](https://www.heroku.com/) or [Now](https://zeit.co/now). For more details, check out the [Deployment](https://bottender.js.org/docs/Guides-Deployment) guide."
    }
  ]
}